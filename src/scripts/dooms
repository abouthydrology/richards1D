#!/bin/bash
#############################################################################
#
# dooms.sh
#
# SCRIPT:   	oms3.CLI wrapper 2
# AUTHOR(S):	Aaron Iemma - 19/07/2016 / Extension of Leonardo Perathoner's 
#				oms3.CLI wrapper (17/04/2016)
# PURPOSE:  	runs oms3 simulation from CLI, creates "good practice" 
#				directory structure and performs builds  
#   	    	
# LICENCE:		BEER-WARE
#
# ----------------------------------------------------------------------------
#  "THE BEER-WARE LICENSE" (Revision 42):
#  <wolfs.bleat@gmail.com> wrote this file. As long as you retain this notice, you
#  can do whatever you want with this stuff. If we meet some day, and you think
#  this stuff is worth it, you can buy me a beer in return. Aaron Iemma
#  ----------------------------------------------------------------------------
# /#
#############################################################################


# TODO: find a way to implement the program without being path-specific
if [ "$1" == "-h" ] || [ "$1" == "--help" ] || [ "$#" -lt 1 ]; then
  echo " 
  Command line access to simulations provided by oms3.CLI class
  usage: ./dooms.sh [-r|-e|-d|-a|-s|-o] <simfile> | [-c|-b] <project directory> | [-cc] <component>
	
           -r <simfile>  run the <simfile>
           -e <simfile>  edit parameter in <simfile> 
           -o <simfile>  open the last output folder in desktop <simfile> 
           -d <simfile>  document the <simfile>
           -a <simfile>  run the <simfile> analysis 
           -s <simfile>  create SHA <simfile> digest 
           -mcp		 model classpath (jar files not specified in <simfile>) 
           -l <loglevel> set the log level:
                OFF|ALL|SEVERE|WARNING|INFO|CONFIG|FINE|FINER|FINEST 
            -c <project directory> creates a project structure from the given <project directory> 
            -b <project directory> performs a build from the give <project directory>
            -cc <component>	compiles a single component
  "
  exit 0
fi

# Dedicated RAM
MEM="-Xmx512m"
# Gets all the command line arguments
CMDARGS=$*
# Instantiate variable to store all the paths to .jar files  
JARS=""
# OMS version
OMSVER="3.5.2"
# Path to oms-all.jar file
OMSALL_PATH="$HOME/.oms/$OMSVER"

while [[ $# -gt 0 ]] # In some cases, the parameters can have an argument
do
	key="$1"
	case $key in
	    -c|--create)
			echo "#############################"
			echo "Creating project structure..."
			echo "#############################"
			sleep 1

			PROJDIR="$2"
			PROJNAME=${PROJDIR##*/} # Parameter expansion wonderfulness
			mkdir $PROJDIR
			mkdir $PROJDIR/.oms
			mkdir $PROJDIR/src
			mkdir $PROJDIR/simulation
			touch $PROJDIR/simulation/$PROJNAME.sim
			mkdir $PROJDIR/dist
			mkdir $PROJDIR/lib
			mkdir $PROJDIR/build
			mkdir $PROJDIR/build/classes
			mkdir $PROJDIR/build/obj
			mkdir $PROJDIR/build/gensrc
			mkdir $PROJDIR/output
			mkdir $PROJDIR/data
			if [ ! -f $PROJDIR/build.xml ]; then
echo '<?xml version="1.0" encoding="UTF-8"?>
<project name="'$PROJNAME'" default="all" basedir=".">
	<description>Builds, tests, and runs the project '$PROJNAME'</description>
	<import file=".oms/project.xml"/>
</project>' > $PROJDIR/build.xml
			fi
			if [ ! -f $PROJDIR/.oms/project.xml ]; then
echo '
<!--
     Do not edit this file!
     Edit the file ../build.properties and ../build.xml instead.
-->
<project basedir=".." >
    <property file=".oms/project.properties"/>

    <!-- Directory properties -->
    <property name="src.dir"        value="src"/>
    <property name="dist.dir"       value="dist"/>
    <property name="lib.dir"        value="lib"/>
    <property name="build.dir"      value="build"/>
    <property name="output.dir"     value="output"/>
    <property name="data.dir"       value="data"/>
    <property name="classes.dir"    value="${build.dir}/classes"/>
    <property name="obj.dir"        value="${build.dir}/obj"/>
    <property name="gensrc.dir"     value="${build.dir}/gensrc"/>
    <property name="other.dir"      value="../../JAVA_BASE_CLASSES"/>

    <!-- OMS Properties -->
    <property name="oms.version"    value="'$OMSVER'"/>
    <property name="oms.home"       value="'$OMSALL_PATH'"/>
    <property name="oms.loglevel"   value="OFF"/>
    <property name="oms.cli"        value="r"/>
      
    <!-- NAP properties -->
    <property name="fortran.files"  value="**/*.f90, **/*.for, **/*.f"/>
    <property name="c.files"        value="**/*.c"/>
    <property name="cpp.files"      value="**/*.cpp, **/*.cpp, **/*.c++, **/*.C"/>
    <property name="nl.files"       value="**/*.nlogo"/>
    
    <!-- Java and JDK properties -->
    <property name="javac.options"          value=""/>
    <property name="javac.source"           value="1.8"/>
    <property name="javac.target"           value="1.8"/>     
    <property name="oms.java.home"          value="${java.home}"/>
    <property name="oms.java.options"       value=""/>
    <property name="oms.java.workingdir"    value="${basedir}"/>
    
    <path id="oms-cp" >
        <fileset dir="${oms.home}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}" erroronmissingdir="false">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${dist.dir}" erroronmissingdir="false">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${other.dir}" erroronmissingdir="false">
            <include name="*.jar"/>
        </fileset>        
    </path>
  
    <taskdef name="nap" classname="oms3.nap.JNAComponentTask" classpathref="oms-cp" />
    <taskdef name="cc" classname="net.sf.antcontrib.cpptasks.CCTask" classpathref="oms-cp" />
  
    <target name="all" depends="jar"/>
    <target name="compile" depends="compile-fortran, nap, compile-java"/>

    <target name="-init">
        <fail unless="ant.project.name">Missing property ''ant.project.name''</fail>
        <property name="name"  value="${ant.project.name}"/>
        <mkdir dir="${classes.dir}"/>
        <mkdir dir="${obj.dir}"/>
        <mkdir dir="${gensrc.dir}"/>
        <mkdir dir="${dist.dir}"/>
        
        <fileset dir="${src.dir}" id="f.src.files" includes="${fortran.files}"/>
        <pathconvert setonempty="false" pathsep=" " property="has.fortran.files" refid="f.src.files"/>
    </target>

    <target name="clean" description="Clean build and dist">
        <delete dir="${build.dir}" followsymlinks="false" includeemptydirs="true"/>
        <delete dir="${dist.dir}" followsymlinks="false" includeemptydirs="true"/>
    </target>
    
    <target name="clean-output" description="Clean output">
        <delete includeemptydirs="true" followsymlinks="false">
            <fileset dir="${output.dir}" includes="**/*"/>
        </delete>
    </target>

    <target name="compile-fortran" depends="-init" if="has.fortran.files" description="Compile all Fortran">
        <cc name="gfortran" outtype="shared" subsystem="console" outfile="${dist.dir}/${name}" objdir="${obj.dir}">
            <fileset dir="${src.dir}" includes="${fortran.files}"/>
            <compilerarg value="-g"/>
            <linker name="gfortran"/>
        </cc>
    </target>
    
    <target name="nap" depends="-init"  unless="skip.nap" description="Perform native annotation processing (NAP)">
        <nap destdir="${gensrc.dir}" dllName="${name}">
            <fileset dir="${src.dir}" includes="${fortran.files}"/>
            <fileset dir="${src.dir}" includes="${nl.files}"/>
        </nap>
    </target>
    
    <target name="compile-java" depends="-init" description="Compile all Java code">
        <javac destdir="${classes.dir}" debug="true" includeantruntime="false"
               target="${javac.target}" source="${javac.source}" classpathref="oms-cp" >
            <compilerarg line="${javac.options}"/>
            <src path="${src.dir}"/>
            <src path="${gensrc.dir}"/>
        </javac>
    </target>

    <target name="jar" depends="-init, compile" description="Build the model jar.">
        <tstamp>
            <format property="now" pattern="yyyy-MM-dd HH:mm:ss z" locale="en,US"/>
        </tstamp>
        <copy todir="${classes.dir}">
            <fileset dir="${src.dir}" excludes="**/*.java **/*.html"/>
        </copy>
        <jar jarfile="${dist.dir}/${name}.jar">
            <fileset dir="${classes.dir}"/>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Built-Date" value="${now}"/>
                <attribute name="Implementation-Vendor" value="USDA/CSU"/>
                <attribute name="Implementation-Title" value="${name}"/>
                <attribute name="Implementation-Version" value="1.0"/>
                <attribute name="OMS-Version" value="${oms.version}"/>
            </manifest>
        </jar>
    </target>
    
    <target name="zip" depends="-init" description="Zip the whole project">
        <basename property="dir.name" file="${basedir}"/>
        <delete file="${dir.name}.zip"/>
        <zip basedir=".." destfile="${dir.name}.zip" includes="${dir.name}/**" 
            excludes="${dir.name}/${build.dir}/, ${dir.name}/${output.dir}/, **/.svn/">
        </zip>
    </target>
    
    <target name="run" description="Run the simulation.">
        <fail unless="file">Missing property ''file''</fail>
        <property name="run.class" value="${file}"/>
        <property name="oms.cli" value="r"/>
        <antcall target="run-selected-file" inheritall="true"/> 
    </target>
    
    <!-- Hook into NB single file execution for freeform projects -->
    <target name="run-selected-file" depends="jar" description="Run simulation from netbeans">
        <fail unless="run.class">Missing property ''run.class''</fail>
        <java dir="${oms.java.workingdir}" classpathref="oms-cp" classname="oms3.CLI" fork="true" jvm="${oms.java.home}/bin/java" >
            <sysproperty key="oms3.work" value="${basedir}"/>
            <jvmarg line="${oms.java.options}"/>
            <arg line="-l ${oms.loglevel} -${oms.cli} ${run.class}"/>
        </java>
    </target>
    
    <target name="debug-selected-file" description="Debug the simulation from netbeans">
        <fail unless="run.class">Missing property ''run.class''</fail>
        <nbjpdastart name="${run.class}" addressproperty="jpda.address" transport="dt_socket">
            <classpath refid="oms-cp"/>
          <!-- Optional - If source roots are properly declared in project, should
          work without setting source path.
          <sourcepath refid="debug.sourcepath"/> -->
        </nbjpdastart>
        <java dir="${oms.java.workingdir}" classpathref="oms-cp" classname="oms3.CLI" fork="true" jvm="${oms.java.home}/bin/java">
            <jvmarg value="-Xdebug"/>
            <jvmarg value="-Xnoagent"/>
            <jvmarg value="-Djava.compiler=none"/>
            <jvmarg value="-Xrunjdwp:transport=dt_socket,address=${jpda.address}"/>
            <jvmarg line="${oms.java.options}"/>
            <sysproperty key="oms3.work" value="${basedir}"/>
            <arg line="-l ${oms.loglevel} -${oms.cli} ${run.class}"/>
        </java>
    </target>
    
    <target name="compile-selected-files-in-src" depends="-init" description="Compile a single file">
        <fail unless="files">Must set property ''files''</fail>
        <javac destdir="${classes.dir}"  includes="${files}" debug="true" includeantruntime="false"
               target="${javac.target}" source="${javac.source}" classpathref="oms-cp" >
            <compilerarg line="${javac.options}"/>
            <src path="${src.dir}"/>
            <src path="${gensrc.dir}"/>
        </javac>
    </target>
  
</project>' > $PROJDIR/.oms/project.xml
			fi
	    shift
	    ;;
	    	    
	    -b|--build)
			echo "##############################"
			echo "Performing a complete build..."
			echo "##############################"
			sleep 1

			PROJDIR="$2"
			if [ ! -f $PROJDIR/build.xml ]; then
			    echo "Buildfile not found!"
			    exit 1 # http://www.tldp.org/LDP/abs/html/exitcodes.html
			fi			
			# Do the actual build
			ant -f $PROJDIR/build.xml

	    shift # past argument
	    ;;

	    -cc|--compilecomp)
			echo "$OMSALL_PATH"
			COMPONENT="$2"

            # Collects all the jar files
            for i in `ls $PROJDIR/dist/*.jar`
            do
                JARS=$JARS:$i
            done
            # Check if there's any lib directory before including it inside the jars var
            if [[ :$PROJDIR: == *":lib:"* ]]; then
                for i in `ls $PROJDIR/lib/*.jar`
                do
                    JARS=$JARS:$i
                done
            fi
            JARS=$JARS$OMSALL_PATH/oms-all.jar

            echo "#####################################"
            echo "Compiling the $COMPONENT component..."
            echo "javac -cp $JARS $COMPONENT"
            echo "#####################################"
            sleep 1

			# Do the compilation
			javac -cp .:$JARS $COMPONENT

		shift
		;;
	    # If no -c, -p or -b are given, then passes all argument to the classic simulation run 
	    -r|-e|-o|-d|-a|-s|-p|-mcp|-l)
			# TODO: some problems here, it seems
			# That's to make the script executable from anywhere in the system: gets the working directory 
			# starting from the passed simfile
			if [[ ":$2:" == *":$HOME:"* ]]; then 	 
				PROJDIR=$(dirname $(dirname "$2")) 		 # If path passed contains home, simply strip
												   		 # the simfile and the simulation dir from that path
			else
				PROJDIR=$PWD/$2							 # Otherwise, you are executing the script from some other directory... That can be
				PROJDIR=$(dirname $(dirname "$PROJDIR")) # concatenated with the one passed. Then same stripping procedure as above
														 # is performed
			fi

			# Collects all the jar files
			for i in `ls $PROJDIR/dist/*.jar`
			do
			    JARS=$JARS:$i
			done
			# Check if there's any lib directory before including it inside the jars var
			#if [[ :$PROJDIR: == *":lib:"* ]]; then
			for i in `ls $PROJDIR/lib/*.jar`
			do
				JARS=$JARS:$i
			done
            for i in `ls $HOME/OMS/GEOFRAME/JAVA_BASE_CLASSES/*.jar`
            do
                JARS=$JARS:$i
            done            
			#fi
			JARS=.$JARS:$OMSALL_PATH/oms-all.jar

			echo "###########################################"
			echo "Executing simulation through command:"
			echo "java $MEM -Doms.sim.resources=$JARS -Doms3.work=$PROJDIR -jar $OMSALL_PATH/oms-all.jar $CMDARGS"
			echo "###########################################"
			# Do the simulation
			java $MEM -Doms.sim.resources=$JARS -Doms3.work=$PROJDIR -jar $OMSALL_PATH/oms-all.jar $CMDARGS
	    ;;
	    *)
	    ;;
	esac
	shift
done